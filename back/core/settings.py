"""
Django settings for peraltaContabilidade project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
import logging
import os
from pathlib import Path

from config import ACCESS_TOKEN_EXPIRATION_SECONDS, REFRESH_TOKEN_EXPIRATION_SECONDS, SMS_CODE_EXPIRATION_SECONDS
from config import AWS_ACCESS_KEY_ID as AAKI, AWS_SECRET_ACCESS_KEY as ASAK, \
    AWS_STORAGE_BUCKET_NAME as ASBN, AWS_S3_FILE_OVERWRITE as ASFO, \
    AWS_S3_ENDPOINT_URL as ASEU, AWS_S3_REGION_NAME as ASRN, \
    AWS_S3_SIGNATURE_VERSION as ASSV, AWS_DEFAULT_ACL as ADA

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a^a&$p$ytqcqh4qv1ic9md3x_(l1o=5y(9ip7gq(_ne&p=#r+4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'app',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'corsheaders',
    'storages'
]

MIDDLEWARE = [
    'core.custom_request.InjectActorOnRequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}]: {levelname} {message} ({filename}:{lineno})',
            'style': '{',
        },
    },
    'handlers': {
            'console': {
                'level': logging.DEBUG,
                'class': 'logging.StreamHandler',
                'formatter': 'verbose'
            },
            'file': {
                'level': logging.DEBUG,
                'class': 'logging.FileHandler',
                'filename': '/'.join(
                    [f"{BASE_DIR.as_posix()}", "back.log"]
                ),
                'formatter': 'verbose'
            },
            'audit': {
                'level': logging.INFO,
                'class': 'logging.FileHandler',
                'filename': '/'.join(
                    [f"{BASE_DIR.as_posix()}", "audit.log"]
                ),
                'formatter': 'verbose'
            },
    },
    'loggers': {
        # Começa com app para pegar apenas os logs gerados dentro de back/app
        'app': {
            'handlers': ['console', 'file', 'audit'],
            'level': logging.DEBUG,
        },
        '': {
            'handlers': ['console', 'file'],
            'level': logging.INFO,
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'app.User'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "ninja_jwt.authentication.JWTAuthentication",
    ]
}

SMS_EXPIRATION = SMS_CODE_EXPIRATION_SECONDS

NINJA_JWT = {
    "AUTH_HEADER_TYPES": ("Bearer",),
    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=ACCESS_TOKEN_EXPIRATION_SECONDS),
    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=REFRESH_TOKEN_EXPIRATION_SECONDS),
}

# Como vários sistemas podem consumir a API, é necessário permitir CORS para todos os domínios
CORS_ALLOW_ALL_ORIGINS = True

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

SEND_SMS = True

AWS_ACCESS_KEY_ID = AAKI
AWS_SECRET_ACCESS_KEY = ASAK
AWS_STORAGE_BUCKET_NAME = ASBN

AWS_S3_ENDPOINT_URL = ASEU
AWS_S3_REGION_NAME = ASRN
AWS_S3_SIGNATURE_VERSION = ASSV
AWS_S3_FILE_OVERWRITE = ASFO
AWS_DEFAULT_ACL = ADA
AWS_QUERYSTRING_AUTH = False

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"
    },
}